/*! For license information please see reactPlayerMux.client.js.LICENSE.txt */
"use strict";(self.webpackChunkreddinamix=self.webpackChunkreddinamix||[]).push([["reactPlayerMux"],{"./node_modules/react-player/lib/players/Mux.js":function(module,__unused_webpack_exports,__webpack_require__){eval('\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __export = (target, all) => {\n    for (var name in all)\n        __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === "object" || typeof from === "function") {\n        for (let key of __getOwnPropNames(from))\n            if (!__hasOwnProp.call(to, key) && key !== except)\n                __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. "__esModule" has not been set), then set\n// "default" to the CommonJS "module.exports" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\nvar __publicField = (obj, key, value) => {\n    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n    return value;\n};\nvar Mux_exports = {};\n__export(Mux_exports, {\n    default: () => Mux\n});\nmodule.exports = __toCommonJS(Mux_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ "./node_modules/react/index.js"));\nvar import_patterns = __webpack_require__(/*! ../patterns */ "./node_modules/react-player/lib/patterns.js");\nconst SDK_URL = "https://cdn.jsdelivr.net/npm/@mux/mux-player@VERSION/dist/mux-player.mjs";\nclass Mux extends import_react.Component {\n    constructor() {\n        super(...arguments);\n        // Proxy methods to prevent listener leaks\n        __publicField(this, "onReady", (...args) => this.props.onReady(...args));\n        __publicField(this, "onPlay", (...args) => this.props.onPlay(...args));\n        __publicField(this, "onBuffer", (...args) => this.props.onBuffer(...args));\n        __publicField(this, "onBufferEnd", (...args) => this.props.onBufferEnd(...args));\n        __publicField(this, "onPause", (...args) => this.props.onPause(...args));\n        __publicField(this, "onEnded", (...args) => this.props.onEnded(...args));\n        __publicField(this, "onError", (...args) => this.props.onError(...args));\n        __publicField(this, "onPlayBackRateChange", (event) => this.props.onPlaybackRateChange(event.target.playbackRate));\n        __publicField(this, "onEnablePIP", (...args) => this.props.onEnablePIP(...args));\n        __publicField(this, "onSeek", (e) => {\n            this.props.onSeek(e.target.currentTime);\n        });\n        __publicField(this, "onDurationChange", () => {\n            const duration = this.getDuration();\n            this.props.onDuration(duration);\n        });\n        __publicField(this, "mute", () => {\n            this.player.muted = true;\n        });\n        __publicField(this, "unmute", () => {\n            this.player.muted = false;\n        });\n        __publicField(this, "ref", (player) => {\n            this.player = player;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n        this.addListeners(this.player);\n        const playbackId = this.getPlaybackId(this.props.url);\n        if (playbackId) {\n            this.player.playbackId = playbackId;\n        }\n    }\n    componentWillUnmount() {\n        this.player.playbackId = null;\n        this.removeListeners(this.player);\n    }\n    addListeners(player) {\n        const { playsinline } = this.props;\n        player.addEventListener("play", this.onPlay);\n        player.addEventListener("waiting", this.onBuffer);\n        player.addEventListener("playing", this.onBufferEnd);\n        player.addEventListener("pause", this.onPause);\n        player.addEventListener("seeked", this.onSeek);\n        player.addEventListener("ended", this.onEnded);\n        player.addEventListener("error", this.onError);\n        player.addEventListener("ratechange", this.onPlayBackRateChange);\n        player.addEventListener("enterpictureinpicture", this.onEnablePIP);\n        player.addEventListener("leavepictureinpicture", this.onDisablePIP);\n        player.addEventListener("webkitpresentationmodechanged", this.onPresentationModeChange);\n        player.addEventListener("canplay", this.onReady);\n        if (playsinline) {\n            player.setAttribute("playsinline", "");\n        }\n    }\n    removeListeners(player) {\n        player.removeEventListener("canplay", this.onReady);\n        player.removeEventListener("play", this.onPlay);\n        player.removeEventListener("waiting", this.onBuffer);\n        player.removeEventListener("playing", this.onBufferEnd);\n        player.removeEventListener("pause", this.onPause);\n        player.removeEventListener("seeked", this.onSeek);\n        player.removeEventListener("ended", this.onEnded);\n        player.removeEventListener("error", this.onError);\n        player.removeEventListener("ratechange", this.onPlayBackRateChange);\n        player.removeEventListener("enterpictureinpicture", this.onEnablePIP);\n        player.removeEventListener("leavepictureinpicture", this.onDisablePIP);\n        player.removeEventListener("canplay", this.onReady);\n    }\n    load(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const { onError, config } = this.props;\n            if (!((_a = globalThis.customElements) == null ? void 0 : _a.get("mux-player"))) {\n                try {\n                    const sdkUrl = SDK_URL.replace("VERSION", config.version);\n                    yield import(\n                    /* webpackIgnore: true */\n                    `${sdkUrl}`);\n                    this.props.onLoaded();\n                }\n                catch (error) {\n                    onError(error);\n                }\n            }\n            const [, id] = url.match(import_patterns.MATCH_URL_MUX);\n            this.player.playbackId = id;\n        });\n    }\n    play() {\n        const promise = this.player.play();\n        if (promise) {\n            promise.catch(this.props.onError);\n        }\n    }\n    pause() {\n        this.player.pause();\n    }\n    stop() {\n        this.player.playbackId = null;\n    }\n    seekTo(seconds, keepPlaying = true) {\n        this.player.currentTime = seconds;\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.player.volume = fraction;\n    }\n    enablePIP() {\n        if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {\n            this.player.requestPictureInPicture();\n        }\n    }\n    disablePIP() {\n        if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {\n            document.exitPictureInPicture();\n        }\n    }\n    setPlaybackRate(rate) {\n        try {\n            this.player.playbackRate = rate;\n        }\n        catch (error) {\n            this.props.onError(error);\n        }\n    }\n    getDuration() {\n        if (!this.player)\n            return null;\n        const { duration, seekable } = this.player;\n        if (duration === Infinity && seekable.length > 0) {\n            return seekable.end(seekable.length - 1);\n        }\n        return duration;\n    }\n    getCurrentTime() {\n        if (!this.player)\n            return null;\n        return this.player.currentTime;\n    }\n    getSecondsLoaded() {\n        if (!this.player)\n            return null;\n        const { buffered } = this.player;\n        if (buffered.length === 0) {\n            return 0;\n        }\n        const end = buffered.end(buffered.length - 1);\n        const duration = this.getDuration();\n        if (end > duration) {\n            return duration;\n        }\n        return end;\n    }\n    getPlaybackId(url) {\n        const [, id] = url.match(import_patterns.MATCH_URL_MUX);\n        return id;\n    }\n    render() {\n        const { url, playing, loop, controls, muted, config, width, height } = this.props;\n        const style = {\n            width: width === "auto" ? width : "100%",\n            height: height === "auto" ? height : "100%"\n        };\n        if (controls === false) {\n            style["--controls"] = "none";\n        }\n        return /* @__PURE__ */ import_react.default.createElement("mux-player", Object.assign({ ref: this.ref, "playback-id": this.getPlaybackId(url), style, preload: "auto", autoPlay: playing || void 0, muted: muted ? "" : void 0, loop: loop ? "" : void 0 }, config.attributes));\n    }\n}\n__publicField(Mux, "displayName", "Mux");\n__publicField(Mux, "canPlay", import_patterns.canPlay.mux);\n\n\n//# sourceURL=webpack://reddinamix/./node_modules/react-player/lib/players/Mux.js?')}}]);