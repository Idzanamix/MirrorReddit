/*! For license information please see main.3a526cf5d942a6fc3d7c.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatereddinamix("main",{"./src/storeRedux/posts/postsSlice.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getPostsDataPending: () => (/* binding */ getPostsDataPending),\n/* harmony export */   postsDataError: () => (/* binding */ postsDataError),\n/* harmony export */   resetPostsData: () => (/* binding */ resetPostsData),\n/* harmony export */   setPostsData: () => (/* binding */ setPostsData)\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @reduxjs/toolkit */ \"./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs\");\n\nconst initialState = {\n    postsData: [],\n    afterList: '',\n    count: 0,\n    loading: false,\n    type: ''\n};\nconst postsSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createSlice)({\n    name: 'postsBlock',\n    initialState,\n    reducers: {\n        resetPostsData(state) {\n            return initialState;\n        },\n        getPostsDataPending(state) {\n            return Object.assign(Object.assign({}, state), { loading: true });\n        },\n        setPostsData(state, action) {\n            const scrolledPosts = state.postsData.concat(action.payload.postsData);\n            const removeDuplicates = scrolledPosts.reduce((uniq, item) => {\n                return !uniq.some((uniqItem) => item.postId === uniqItem.postId)\n                    ? [...uniq, item]\n                    : uniq;\n            }, []);\n            const switchedIsLastPostsData = removeDuplicates.map((post, i, arr) => {\n                if (arr.length - 1 === i) {\n                    return Object.assign(Object.assign({}, post), { isLast: true });\n                }\n                else {\n                    return Object.assign(Object.assign({}, post), { isLast: false });\n                }\n            });\n            return Object.assign(Object.assign({}, state), { postsData: switchedIsLastPostsData, afterList: action.payload.after, count: state.count > 1\n                    ? (scrolledPosts.length - removeDuplicates.length > 2)\n                        ? state.count + 1\n                        : 0\n                    : state.count + 1, type: action.payload.postType || state.type, loading: false });\n        },\n        postsDataError(state, action) {\n            return {\n                postsData: [],\n                loading: false,\n                afterList: '',\n                count: 0,\n                error: action.payload,\n                type: ''\n            };\n        }\n    }\n});\nconst { resetPostsData, getPostsDataPending, setPostsData, postsDataError } = postsSlice.actions;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (postsSlice.reducer);\n\n\n//# sourceURL=webpack://reddinamix/./src/storeRedux/posts/postsSlice.ts?")}},(function(t){t.h=()=>"1e63a6b63def6bb931f9"}));